"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const Point_ts_1 = require("../src/Point.ts");
const Rect_ts_1 = require("../src/Rect.ts");
const Sprite_ts_1 = require("../src/Sprite.ts");
let subject;
let offBoundaryCalled;
// no args constructor
subject = new Sprite_ts_1.Sprite();
assert_1.default.strictEqual(subject.accelerationX, 0);
assert_1.default.strictEqual(subject.accelerationY, 0);
assert_1.default.strictEqual(subject.boundary, null);
assert_1.default.strictEqual(subject.color, null);
assert_1.default.strictEqual(subject.essential, false);
assert_1.default.strictEqual(subject.expiration, 0);
assert_1.default.strictEqual(subject.expired, false);
assert_1.default.strictEqual(subject.layerIndex, 0);
assert_1.default.strictEqual(subject.maxSpeedX, 0);
assert_1.default.strictEqual(subject.maxSpeedY, 0);
assert_1.default.strictEqual(subject.solid, false);
assert_1.default.strictEqual(subject.speedX, 0);
assert_1.default.strictEqual(subject.speedY, 0);
assert_1.default.strictEqual(subject.visible, true);
assert_1.default.strictEqual(subject.angle, 0);
assert_1.default.strictEqual(subject.direction.left, false);
assert_1.default.strictEqual(subject.direction.right, false);
assert_1.default.strictEqual(subject.direction.top, false);
assert_1.default.strictEqual(subject.direction.bottom, false);
assert_1.default.strictEqual(subject.image, null);
assert_1.default.strictEqual(subject.tick, 0);
// setters
subject = new Sprite_ts_1.Sprite();
assert_1.default.strictEqual(subject.setAccelerationX(4), subject);
assert_1.default.strictEqual(subject.accelerationX, 4);
assert_1.default.strictEqual(subject.setAccelerationY(5), subject);
assert_1.default.strictEqual(subject.accelerationY, 5);
assert_1.default.strictEqual(subject.setSpeedX(6), subject);
assert_1.default.strictEqual(subject.speedX, 6);
assert_1.default.strictEqual(subject.setSpeedY(7), subject);
assert_1.default.strictEqual(subject.speedY, 7);
assert_1.default.strictEqual(subject.setPosition(new Point_ts_1.Point().setX(8).setY(9)), subject);
assert_1.default.strictEqual(subject.x, 8);
assert_1.default.strictEqual(subject.y, 9);
assert_1.default.strictEqual(subject.setX(10).setY(11), subject);
assert_1.default.strictEqual(subject.x, 10);
assert_1.default.strictEqual(subject.y, 11);
assert_1.default.strictEqual(subject.setX(0).setY(0), subject);
assert_1.default.strictEqual(subject.x, 0);
assert_1.default.strictEqual(subject.y, 0);
assert_1.default.strictEqual(subject.setSize(new Rect_ts_1.Rect().setX(0).setY(0).setWidth(20).setHeight(21)), subject);
assert_1.default.strictEqual(subject.width, 20);
assert_1.default.strictEqual(subject.height, 21);
assert_1.default.strictEqual(subject.setWidth(19).setHeight(19), subject);
assert_1.default.strictEqual(subject.width, 19);
assert_1.default.strictEqual(subject.height, 19);
assert_1.default.strictEqual(subject.setWidth(0).setHeight(0), subject);
assert_1.default.strictEqual(subject.width, 0);
assert_1.default.strictEqual(subject.height, 0);
// collision detection
let subject1 = new Sprite_ts_1.Sprite().setWidth(2).setHeight(2);
let subject2 = new Sprite_ts_1.Sprite().setX(1).setY(1).setWidth(2).setHeight(2);
let subject3 = new Sprite_ts_1.Sprite().setX(2).setY(2).setWidth(2).setHeight(2);
assert_1.default.strictEqual(subject1.hasCollision(subject2), true);
assert_1.default.strictEqual(subject1.hasCollision(subject3), false);
let collision = subject1.getCollision(subject2);
assert_1.default.strictEqual(collision.right, true);
assert_1.default.strictEqual(collision.bottom, true);
// on boundary
subject = new Sprite_ts_1.Sprite();
subject.setWidth(16).setHeight(16);
offBoundaryCalled = false;
subject.offBoundary = () => {
    offBoundaryCalled = true;
};
subject.setBoundary(new Rect_ts_1.Rect().setX(0).setY(0).setWidth(200).setHeight(200));
subject.sync();
assert_1.default.strictEqual(offBoundaryCalled, false);
// off boundary
subject.setBoundary(new Rect_ts_1.Rect().setX(20).setHeight(20).setWidth(100).setHeight(100));
subject.sync();
assert_1.default.strictEqual(offBoundaryCalled, true);
// expiration
subject = new Sprite_ts_1.Sprite().setExpiration(5);
for (let i = 0; i < 5; ++i) {
    assert_1.default.strictEqual(subject.expired, false);
    assert_1.default.strictEqual(subject.tick, i);
    assert_1.default.strictEqual(subject.sync(), false);
}
assert_1.default.strictEqual(subject.expired, true);
assert_1.default.strictEqual(subject.sync(), true);
// visibility
subject.setVisible();
assert_1.default.strictEqual(subject.visible, true);
subject.setVisible(true);
assert_1.default.strictEqual(subject.visible, true);
subject.setVisible(false);
assert_1.default.strictEqual(subject.visible, false);
// speed to angle
subject = new Sprite_ts_1.Sprite();
subject.setSpeedToAngle(1, 0);
assert_1.default.strictEqual(Math.round(subject.speedX), 1);
assert_1.default.strictEqual(Math.round(subject.speedY), 0);
subject.setSpeedToAngle(1, 90);
assert_1.default.strictEqual(Math.round(subject.speedX), 0);
assert_1.default.strictEqual(Math.round(subject.speedY), 1);
subject.setSpeedToAngle(1, 180);
assert_1.default.strictEqual(Math.round(subject.speedX), -1);
assert_1.default.strictEqual(Math.round(subject.speedY), 0);
subject.setSpeedToAngle(1, 270);
assert_1.default.strictEqual(Math.round(subject.speedX), -0);
assert_1.default.strictEqual(Math.round(subject.speedY), -1);
// get angle
subject = new Sprite_ts_1.Sprite();
assert_1.default.strictEqual(subject.angle, 0);
subject.setSpeedX(1);
subject.setSpeedY(1);
assert_1.default.strictEqual(subject.angle, 45);
subject.setSpeedX(-1);
subject.setSpeedY(1);
assert_1.default.strictEqual(subject.angle, 135);
subject.setSpeedX(-1);
subject.setSpeedY(-1);
assert_1.default.strictEqual(subject.angle, -135);
subject.setSpeedX(1);
subject.setSpeedY(-1);
assert_1.default.strictEqual(subject.angle, -45);
// speed to subject
subject1 = new Sprite_ts_1.Sprite();
subject2 = new Sprite_ts_1.Sprite().setX(100).setY(50);
subject1.setSpeedToPoint(2, subject2);
subject2.setSpeedToPoint(2, subject1);
assert_1.default.strictEqual(subject1.speedX, 100 / 150 * 2);
assert_1.default.strictEqual(subject1.speedY, 50 / 150 * 2);
assert_1.default.strictEqual(subject2.speedX, -100 / 150 * 2);
assert_1.default.strictEqual(subject2.speedY, -50 / 150 * 2);
// max speed
subject = new Sprite_ts_1.Sprite();
subject.setMaxSpeedX(2);
subject.setMaxSpeedY(4);
subject.setAccelerationX(1);
subject.setAccelerationY(2);
subject.sync();
assert_1.default.strictEqual(subject.speedX, 1);
assert_1.default.strictEqual(subject.speedY, 2);
subject.sync();
assert_1.default.strictEqual(subject.speedX, 2);
assert_1.default.strictEqual(subject.speedY, 4);
subject.sync();
assert_1.default.strictEqual(subject.speedX, 2);
assert_1.default.strictEqual(subject.speedY, 4);
subject.pause();
subject.setAccelerationX(-1);
subject.setAccelerationY(-2);
subject.sync();
assert_1.default.strictEqual(subject.speedX, -1);
assert_1.default.strictEqual(subject.speedY, -2);
subject.sync();
assert_1.default.strictEqual(subject.speedX, -2);
assert_1.default.strictEqual(subject.speedY, -4);
subject.sync();
assert_1.default.strictEqual(subject.speedX, -2);
assert_1.default.strictEqual(subject.speedY, -4);
// direction
subject = new Sprite_ts_1.Sprite();
assert_1.default.strictEqual(subject.direction.left, false);
assert_1.default.strictEqual(subject.direction.right, false);
assert_1.default.strictEqual(subject.direction.top, false);
assert_1.default.strictEqual(subject.direction.bottom, false);
subject.sync();
assert_1.default.strictEqual(subject.direction.left, false);
assert_1.default.strictEqual(subject.direction.right, false);
assert_1.default.strictEqual(subject.direction.top, false);
assert_1.default.strictEqual(subject.direction.bottom, false);
subject.sync();
subject.x += 1;
assert_1.default.strictEqual(subject.direction.left, false);
assert_1.default.strictEqual(subject.direction.right, true);
assert_1.default.strictEqual(subject.direction.top, false);
assert_1.default.strictEqual(subject.direction.bottom, false);
subject.sync();
subject.y += 1;
assert_1.default.strictEqual(subject.direction.left, false);
assert_1.default.strictEqual(subject.direction.right, false);
assert_1.default.strictEqual(subject.direction.top, false);
assert_1.default.strictEqual(subject.direction.bottom, true);
subject.sync();
subject.x -= 1;
assert_1.default.strictEqual(subject.direction.left, true);
assert_1.default.strictEqual(subject.direction.right, false);
assert_1.default.strictEqual(subject.direction.top, false);
assert_1.default.strictEqual(subject.direction.bottom, false);
subject.sync();
subject.y -= 1;
assert_1.default.strictEqual(subject.direction.left, false);
assert_1.default.strictEqual(subject.direction.right, false);
assert_1.default.strictEqual(subject.direction.top, true);
assert_1.default.strictEqual(subject.direction.bottom, false);
subject.sync();
assert_1.default.strictEqual(subject.direction.left, false);
assert_1.default.strictEqual(subject.direction.right, false);
assert_1.default.strictEqual(subject.direction.top, false);
assert_1.default.strictEqual(subject.direction.bottom, false);
// resume / stop
subject
    .setSpeedX(1)
    .setSpeedY(2);
subject.pause();
subject.resume();
assert_1.default.strictEqual(subject.speedX, 1);
assert_1.default.strictEqual(subject.speedY, 2);
subject.stop();
subject.resume();
assert_1.default.strictEqual(subject.speedX, 0);
assert_1.default.strictEqual(subject.speedY, 0);
//# sourceMappingURL=SpriteTest.js.map